[{"uri":"https://fslab.org/docs-template/reference/testproject.html","title":"testProject","content":"Say","headings":[],"type":"apiDocs"},{"uri":"https://fslab.org/docs-template/reference/testproject-say.html","title":"Say","content":"Say \na module \nSay.hello \nhello","headings":[],"type":"apiDocs"},{"uri":"https://fslab.org/docs-template/reference/testproject-say.html#hello","title":"Say.hello","content":"Say.hello \nhello \na function that says hello to the name you pass it","headings":[],"type":"apiDocs"},{"uri":"https://fslab.org/docs-template/download-badges.html","title":"Adding download badges","content":"\nAdding download badges\nScript download\n[![Script](https://fslab.org/docs-template/img/badge-script.svg)](https://fslab.org/docs-template/download-badges.fsx)\u0060\n\nbecomes\n\n(you might need to adjust the paths if there are any more levels between {{root}} and img/badge-script.svg or {{fsdocs-source-basename}})\nNotebook download\n[![Notebook](https://fslab.org/docs-template/img/badge-notebook.svg)](https://fslab.org/docs-template/download-badges.ipynb)\n\nbecomes\n\n(you might need to adjust the paths if there are any more levels between {{root}} and img/badge-script.svg or {{fsdocs-source-basename}})\nMultiple badges in one line\nTo add multiple badges to appear on the same line like this:\n\u0026emsp;\n\nadd a \u0026amp;emsp; after the first two badges in you markdown:\n[![Script](https://fslab.org/docs-template/img/badge-script.svg)](https://fslab.org/docs-template/download-badges.fsx)\u0026amp;emsp;\n[![Notebook](https://fslab.org/docs-template/img/badge-notebook.svg)](https://fslab.org/docs-template/download-badges.ipynb)\n\n","headings":["Adding download badges","Script download","Notebook download","Multiple badges in one line"],"type":"content"},{"uri":"https://fslab.org/docs-template/fsharp-code-example.html","title":"F# code formatting example","content":"\n\u0026emsp;\n\u0026emsp;\n\nHow to add these badges?\nF# code formatting example\nThis page is rendered from a F# script as input, containing real F# code besides this markdown section.\nhover above some bindings to get tooltips like in a real editor environment.\n///this is comment\nlet a = 42\n\n42\n// see some operators/keywords:\n\nif a \u0026gt; 0 then printfn \u0026quot;see, this is included: %i\u0026quot; a\n\n// an interface:\ntype IA =\n    abstract member B : string -\u0026gt; string\n\n// an interface implementation:\n\ntype C() =\n    interface IA with\n        member _.B(a) = id a\n\nlet d = C() :\u0026gt; IA\n\nlet e = d.B(\u0026quot;soos\u0026quot;)\n\n\u0022soos\u0022\nmodule ThisIsAModule =\n\n    type Union =\n        | First\n        | Second of IA\n\n    type Enum =\n        | First = 1\n        | Second = 2\n\n","headings":["F# code formatting example"],"type":"content"},{"uri":"https://fslab.org/docs-template/inline-references.html","title":"Inline package references and charting","content":"\n\u0026emsp;\n\u0026emsp;\n\nHow to add these badges?\nInline package references and charting\nWith fsdocs 8.0, the tool can roll forward to .net 5, meaning you can use inline package references in the docs scripts:\n#r \u0026quot;nuget: Plotly.NET, 2.0.0-preview.6\u0026quot;\n\nopen Plotly.NET\n\nlet myChart = \n    Chart.Line(\n        [\n            1.,1.\n            5.,6.\n            23.,9.\n        ]\n    )\n    |\u0026gt; Chart.withTitle \u0026quot;Hello fsdocs!\u0026quot;\n\nYou can now also include raw html in your docs scripts with the new include-it-raw.\nTo incude the chart html of a Plotly.NET chart and and render it on the docs page, use the GenericChart.toChartHTML\nand include the raw output.\nthe actual codeblock looks like this:\n\n\n(***hide***)\nmyChart |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n\n\nHere is the rendered chart:\n\n\n\n            var renderPlotly_7d08b5b2b9314ef2858fcbe26830cbe8 = function() {\n            var fsharpPlotlyRequire = requirejs.config({context:\u0027fsharp-plotly\u0027,paths:{plotly:\u0027https://cdn.plot.ly/plotly-latest.min\u0027}}) || require;\n            fsharpPlotlyRequire([\u0027plotly\u0027], function(Plotly) {\n\n            var data = [{\u0022type\u0022:\u0022scatter\u0022,\u0022x\u0022:[1.0,5.0,23.0],\u0022y\u0022:[1.0,6.0,9.0],\u0022mode\u0022:\u0022lines\u0022,\u0022line\u0022:{},\u0022marker\u0022:{}}];\n            var layout = {\u0022title\u0022:\u0022Hello fsdocs!\u0022};\n            var config = {};\n            Plotly.newPlot(\u00277d08b5b2-b931-4ef2-858f-cbe26830cbe8\u0027, data, layout, config);\n});\n            };\n            if ((typeof(requirejs) !==  typeof(Function)) || (typeof(requirejs.config) !== typeof(Function))) {\n                var script = document.createElement(\u0022script\u0022);\n                script.setAttribute(\u0022src\u0022, \u0022https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\u0022);\n                script.onload = function(){\n                    renderPlotly_7d08b5b2b9314ef2858fcbe26830cbe8();\n                };\n                document.getElementsByTagName(\u0022head\u0022)[0].appendChild(script);\n            }\n            else {\n                renderPlotly_7d08b5b2b9314ef2858fcbe26830cbe8();\n            }\n\n\n","headings":["Inline package references and charting"],"type":"content"},{"uri":"https://fslab.org/docs-template/markdown-cheetsheet.html","title":"Markdown cheatsheet","content":"\nMarkdown cheatsheet\nAdapted from https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\nThis is intended as a quick reference and showcase. For more complete info, see John Gruber\u0027s original spec and the Github-flavored Markdown info page.\nTable of Contents\n\n\nMarkdown cheatsheet\n\nTable of Contents\n\n\nHeaders\n\nH1\n\n\nH2\n\n\nH3\n\n\nH4\n\n\nH5\n\nH6\n\n\n\n\n\n\n\n\n\n\n\nAlt-H1\n\nAlt-H2\nEmphasis\nLists\nLinks\nImages\nCode and Syntax Highlighting\nTables\nBlockquotes\nInline HTML\nHorizontal Rule\nLine Breaks\nYouTube Videos\n\n\n\nHeaders\n# H1\n## H2\n### H3\n#### H4\n##### H5\n###### H6\n\nAlternatively, for H1 and H2, an underline-ish style:\n\nAlt-H1\n======\n\nAlt-H2\n------\n\nH1\nH2\nH3\nH4\nH5\nH6\nAlternatively, for H1 and H2, an underline-ish style:\nAlt-H1\nAlt-H2\nEmphasis\nEmphasis, aka italics, with *asterisks* or _underscores_.\n\nStrong emphasis, aka bold, with **asterisks** or __underscores__.\n\nCombined emphasis with **asterisks and _underscores_**.\n\nStrikethrough uses two tildes. ~~Scratch this.~~\n\nEmphasis, aka italics, with asterisks or underscores.\nStrong emphasis, aka bold, with asterisks or underscores.\nCombined emphasis with asterisks and underscores.\nStrikethrough uses two tildes. ~~Scratch this.~~\nLists\n(In this example, leading and trailing spaces are shown with with dots: \u22C5)\n1. First ordered list item\n2. Another item\n\u22C5\u22C5* Unordered sub-list. \n1. Actual numbers don\u0027t matter, just that it\u0027s a number\n\u22C5\u22C51. Ordered sub-list\n4. And another item.\n\n\u22C5\u22C5\u22C5You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we\u0027ll use three here to also align the raw Markdown).\n\n\u22C5\u22C5\u22C5To have a line break without a paragraph, you will need to use two trailing spaces.\u22C5\u22C5\n\u22C5\u22C5\u22C5Note that this line is separate, but within the same paragraph.\u22C5\u22C5\n\u22C5\u22C5\u22C5(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\n* Unordered list can use asterisks\n- Or minuses\n\u002B Or pluses\n\n\nFirst ordered list item\n\nAnother item\n\nUnordered sub-list.\n\n\n\nActual numbers don\u0027t matter, just that it\u0027s a number\n\nOrdered sub-list\n\n\n\nAnd another item.\nYou can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we\u0027ll use three here to also align the raw Markdown).\nTo have a line break without a paragraph, you will need to use two trailing spaces.\nNote that this line is separate, but within the same paragraph.\n(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\nUnordered list can use asterisks\nOr minuses\nOr pluses\n\nLinks\nThere are two ways to create links.\n[I\u0027m an inline-style link](https://www.google.com)\n\n[I\u0027m an inline-style link with title](https://www.google.com \u0022Google\u0027s Homepage\u0022)\n\n[I\u0027m a reference-style link][Arbitrary case-insensitive reference text]\n\n[I\u0027m a relative reference to a repository file](../blob/master/LICENSE)\n\n[You can use numbers for reference-style link definitions][1]\n\nOr leave it empty and use the [link text itself].\n\nURLs and URLs in angle brackets will automatically get turned into links. \nhttp://www.example.com or \u0026lt;http://www.example.com\u0026gt; and sometimes \nexample.com (but not on Github, for example).\n\nSome text to show that the reference links can follow later.\n\n[arbitrary case-insensitive reference text]: https://www.mozilla.org\n[1]: http://slashdot.org\n[link text itself]: http://www.reddit.com\n\nI\u0027m an inline-style link\nI\u0027m an inline-style link with title\n[I\u0027m a reference-style link][Arbitrary case-insensitive reference text]\nI\u0027m a relative reference to a repository file\nYou can use numbers for reference-style link definitions\nOr leave it empty and use the link text itself.\nURLs and URLs in angle brackets will automatically get turned into links.\nhttp://www.example.com or http://www.example.com and sometimes\nexample.com (but not on Github, for example).\nSome text to show that the reference links can follow later.\nImages\nHere\u0027s our logo (hover to see the title text):\n\nInline-style: \n![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \u0022Logo Title Text 1\u0022)\n\nReference-style: \n![alt text][logo]\n\n[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \u0022Logo Title Text 2\u0022\n\nHere\u0027s our logo (hover to see the title text):\nInline-style:\n\nCode and Syntax Highlighting\nCode blocks are part of the Markdown spec, but syntax highlighting isn\u0027t. However, many renderers -- like Github\u0027s and FSharp.Formatting -- support syntax highlighting. Which languages are supported and how those language names should be written will vary from renderer to renderer.\nInline \u0060code\u0060 has \u0060back-ticks around\u0060 it.\n\nInline code has back-ticks around it.\nBlocks of code are either fenced by lines with three back-ticks \u0060\u0060\u0060, or are indented with four spaces. I recommend only using the fenced code blocks -- they\u0027re easier and only they support syntax highlighting.\nCurrently, only F# and C# syntax highlighting is supported by FSharp.Formatting. You can write code blocks in markdown like this\nF#:\n\n\u0060\u0060\u0060fsharp\nlet a = 42\n\u0060\u0060\u0060\n\nlet a = 42\n\nOr C#:\n\n\u0060\u0060\u0060csharp\nvar a = 42\n\u0060\u0060\u0060\n\nvar a = 42\n\nFSharp.Formatting will also attempt to highlight snippets that are not in those languages, which will have mixed results\n\n\u0060\u0060\u0060javascript\nvar s = \u0022JavaScript syntax highlighting\u0022;\nalert(s);\n\u0060\u0060\u0060\n\nconst a = 2\nvar s = \u0022JavaScript syntax highlighting? not really.\u0022;\nalert(s);\n// Some javascript keywords that are not detected because they are no equivalents in F#/C#:\nnative\nthrows\ninstanceof\n\nHowever, there is way better syntax highlighting and also tooltips available for F# and C# if you use script files for generating those docs instead. See an F# example here.\nTables\nTables aren\u0027t part of the core Markdown spec, but FSharp.Formatting supports them. Tables are styled via bulma striped table style.\nColons can be used to align columns.\n\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n\nThere must be at least 3 dashes separating each header cell.\nThe outer pipes (|) are optional, and you don\u0027t need to make the \nraw Markdown line up prettily. You can also use inline Markdown.\n\nMarkdown | Less | Pretty\n--- | --- | ---\n*Still* | \u0060renders\u0060 | **nicely**\n1 | 2 | 3\n\nColons can be used to align columns.\n\n\n\nTables\nAre\nCool\n\n\n\n\ncol 3 is\nright-aligned\n$1600\n\n\ncol 2 is\ncentered\n$12\n\n\nzebra stripes\nare neat\n$1\n\n\n\n\nThere must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don\u0027t need to make the raw Markdown line up prettily. You can also use inline Markdown.\n\n\n\nMarkdown\nLess\nPretty\n\n\n\n\nStill\nrenders\nnicely\n\n\n1\n2\n3\n\n\n\n\nBlockquotes\n\u0026gt; Blockquotes are very handy in email to emulate reply text.\n\u0026gt; This line is part of the same quote.\n\nQuote break.\n\n\u0026gt; This is a very long line that will still be quoted properly when it wraps. Oh boy let\u0027s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote. \n\n\nBlockquotes are very handy in email to emulate reply text.\nThis line is part of the same quote.\n\nQuote break.\n\nThis is a very long line that will still be quoted properly when it wraps. Oh boy let\u0027s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can put Markdown into a blockquote.\n\nInline HTML\nYou can also use raw HTML in your Markdown, and it\u0027ll mostly work pretty well.\n\u0026lt;dl\u0026gt;\n  \u0026lt;dt\u0026gt;Definition list\u0026lt;/dt\u0026gt;\n  \u0026lt;dd\u0026gt;Is something people use sometimes.\u0026lt;/dd\u0026gt;\n\n  \u0026lt;dt\u0026gt;Markdown in HTML\u0026lt;/dt\u0026gt;\n  \u0026lt;dd\u0026gt;Does *not* work **very** well. Use HTML \u0026lt;em\u0026gt;tags\u0026lt;/em\u0026gt;.\u0026lt;/dd\u0026gt;\n\u0026lt;/dl\u0026gt;\n\n\n  Definition list\n  Is something people use sometimes.\nMarkdown in HTML\nDoes not work very well. Use HTML tags.\n\nHorizontal Rule\nThree or more...\n\n---\n\nHyphens\n\n***\n\nAsterisks\n\n___\n\nUnderscores\n\nThree or more...\n\nHyphens\n\nAsterisks\n\nUnderscores\nLine Breaks\nMy basic recommendation for learning how line breaks work is to experiment and discover -- hit \u0026lt;Enter\u0026gt; once (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You\u0027ll soon learn to get what you want. \u0022Markdown Toggle\u0022 is your friend.\nHere are some things to try out:\nHere\u0026#39;s a line for us to start with.\n\nThis line is separated from the one above by two newlines, so it will be a *separate paragraph*.\n\nThis line is also a separate paragraph, but...\nThis line is only separated by a single newline, so it\u0026#39;s a separate line in the *same paragraph*.\n\nHere\u0027s a line for us to start with.\nThis line is separated from the one above by two newlines, so it will be a separate paragraph.\nThis line is also begins a separate paragraph, but...\nThis line is only separated by a single newline, so it\u0027s a separate line in the same paragraph.\nYouTube Videos\nThey can\u0027t be added directly but you can add an image with a link to the video like this:\n\u0026lt;a href=\u0022http://www.youtube.com/watch?feature=player_embedded\u0026amp;v=YOUTUBE_VIDEO_ID_HERE\n\u0022 target=\u0022_blank\u0022\u0026gt;\u0026lt;img src=\u0022http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg\u0022 \nalt=\u0022IMAGE ALT TEXT HERE\u0022 width=\u0022240\u0022 height=\u0022180\u0022 border=\u002210\u0022 /\u0026gt;\u0026lt;/a\u0026gt;\n\nOr, in pure Markdown, but losing the image sizing and border:\n[![IMAGE ALT TEXT HERE](http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg)](http://www.youtube.com/watch?v=YOUTUBE_VIDEO_ID_HERE)\n\n\nLicense: CC-BY\n","headings":["Markdown cheatsheet","Table of Contents","Headers","H1","H2","H3","H4","H5","H6","Alt-H1","Alt-H2","Emphasis","Lists","Links","Images","Code and Syntax Highlighting","Tables","Blockquotes","Inline HTML","Horizontal Rule","Line Breaks","YouTube Videos"],"type":"content"},{"uri":"https://fslab.org/docs-template/index.html","title":"The fslab documentation template\n","content":"The fslab documentation template\nThis template scaffolds the necessary folder structure for documentation with FSharp.Formatting and it\u0027s fsdocs tool,\nand adds custom styles in the fslab theme.\nTable of contents\n\nInstallation\nUsage\nQuick content rundown\nCreating new content\n\nCustomization options\n\nStyle sheet options\nInclusion of sample content\nCreate notebooks\n\n\n\nInstallation\nThis template is available as a dotnet new template (from nuget):\ndotnet new -i FsLab.DocumentationTemplate\n\nUsage\nIf not already present, create a local tool manifest in the root of your project that you want to write documentation for:\ndotnet new tool-manifest\n\nThen, still in the root of your project, run:\ndotnet new fslab-docs\n\nQuick content rundown:\nThe default template initializes the following folder structure when you initialize it in the root of your project.\nSee further below for command line customization options of the template.\ndocs\n\u2502   index.fsx\n\u2502   _template.html\n\u2502   _template.ipynb\n\u2502\n\u2502   fsharp-code-example.fsx\n\u2502   inline-references.fsx\n\u2502   notebooks.fsx\n|\n\u251C\u2500\u2500\u2500content\n\u2502   fsdocs-custom.css\n\u2502\n\u251C\u2500\u2500\u2500img\n\u2502       favicon.ico\n\u2502       logo.png\n\u2502\n\u2514\u2500\u2500\u2500reference\n        _template.html\n\n\n\nindex.fsx is the file you are reading just now. It contains the very content you are reading at the moment\nin a markdown block indicated by (** *) guards. It will be rendered as the root index.html file of your documentation.\n\n_template.html is the root html scaffold (sidebar to the left, script and style loading) where all of the individual docs will be injected into\n0_Markdown-Cheatsheet.md is a adaption of this markdown cheat sheet that shows how to write markdown and showcases the rendered equivalents. It can also be viewed in all its glory here.\n1_fsharp-code-example.fsx is a script file that showcases the syntax highlighting style for F# snippets. It can also be viewed in all its glory here.\n2_inline-references.fsx is a script file that explains how to use inline references and use Plotly.NET for charting. It can also be viewed in all its glory here.\n3_notebooks.fsx is a script file that showcases conditional content in documentation and how to use that to create dotnet interactive notebooks besides your html documentation. It can also be viewed in all its glory here.\n\nfsdocs-custom.css contains the custom styling that applies the fslab styles.\n\nthe img folder contains the fslab logo and favicon. replace these files (with the same names) to youse sours\nreference/_template.html is a slightly adapted version of the template above for the API documentation\n\n\n\nCreating new content\n\nrun dotnet fsdocs watch --eval to spawn a watcher and dev server that hosts your docs on http://localhost:8901/ (You currently will still have to refresh the page when you make changes to files)\nadd a new .md or .fsx file to the content directory (or into a new subdirectory there)\nthe sidebar title for the document will be either the file name or, if existent, the first level 1 header in the file\nwhen writing a .fsx file, code will automatically become syntax-highlighted code snippets.\nuse (** \u0026lt;markdown here\u0026gt; *) to guard markdown sections in .fsx files\nuse (*** include-value:\u0026lt;val name\u0026gt; ***) to include the value of a binding\nuse (*** include-it ***) to include the evaluation of the previous snippet block\n\nFor more info please refer to the FSharp.Formatting documentation.\nCustomization options\nStyle sheet options\n-s|--styles             Set the type of style content the template will initialize. For the sass file to work, you will have to download bulma\n\n        all             - sass file, compiled csss, and minified css\n\n        sass            - only include the sass file\n\n        minified        - only include the minified css file\n\n        css             - only include the compiled css file\n\n        Default:        css\n\nInclusion of sample content\n-is|--include-samples   wether to include sample files in the generated content\n\n        bool            - Optional\n\n        Default:        true\n\nCreate notebooks\n-in|--include-notebooks  wether to include the notebook template file\n        \n        bool            - Optional\n\n        Default:        true\n\n","headings":["The fslab documentation template","Table of contents","Installation","Usage","Quick content rundown:","Creating new content","Customization options","Style sheet options","Inclusion of sample content","Create notebooks"],"type":"content"},{"uri":"https://fslab.org/docs-template/notebooks.html","title":"Including notebooks","content":"\n\u0026emsp;\n\u0026emsp;\n\nHow to add these badges?\nIncluding notebooks\nTo include dotnet interactive notebooks in the ipynb format, it is enough for the _template.ipynb file to simply exist.\nThere are however some customization options with fsdocs that move your documentation to the next level:\nConditional package references\nuse the IPYNB compiler directive in conjuntion with condition:ipynb to include blocks only in the rendered notebook file.\nThis is especially usefull for referencing packages that otherwise be referenced locally during yopur buildchain:\n\n\n#r \u0022/path/to/your/binaries/during/local/build\u0022\n\n(***condition:ipynb***)\n#if IPYNB\n#r \u0022nuget: yourProjectOnNuget, 1.3.3.7\u0022\n#endif // IPYNB\n\n\nConditional value inclusion\nSometimes the content you want to include might differ aswell. An example is Plotly.NET charts.\nWhile you want to dump the chart html directly into the html docs via (include-it-raw),\nyou want to end cells in notebooks with the chart value itself to include the chart in the output cell with Plotly.NET.Interactive.\nHere is an example for such an conditional block:\n\n\nopen Plotly.NET\n\nlet myChart = Chart.Point([1.,2.])\n\n(***condition:ipynb***)\n#if IPYNB\nmyChart\n#endif // IPYNB\n\n(***hide***)\nmyChart |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n\nopen Plotly.NET\n\nlet myChart = Chart.Point([1.,2.])\n\n\n\n\n            var renderPlotly_9580b2436bc4471ab6716d657b4cf136 = function() {\n            var fsharpPlotlyRequire = requirejs.config({context:\u0027fsharp-plotly\u0027,paths:{plotly:\u0027https://cdn.plot.ly/plotly-latest.min\u0027}}) || require;\n            fsharpPlotlyRequire([\u0027plotly\u0027], function(Plotly) {\n\n            var data = [{\u0022type\u0022:\u0022scatter\u0022,\u0022x\u0022:[1.0],\u0022y\u0022:[2.0],\u0022mode\u0022:\u0022markers\u0022,\u0022marker\u0022:{}}];\n            var layout = {};\n            var config = {};\n            Plotly.newPlot(\u00279580b243-6bc4-471a-b671-6d657b4cf136\u0027, data, layout, config);\n});\n            };\n            if ((typeof(requirejs) !==  typeof(Function)) || (typeof(requirejs.config) !== typeof(Function))) {\n                var script = document.createElement(\u0022script\u0022);\n                script.setAttribute(\u0022src\u0022, \u0022https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\u0022);\n                script.onload = function(){\n                    renderPlotly_9580b2436bc4471ab6716d657b4cf136();\n                };\n                document.getElementsByTagName(\u0022head\u0022)[0].appendChild(script);\n            }\n            else {\n                renderPlotly_9580b2436bc4471ab6716d657b4cf136();\n            }\n\n\nIncluding binder links\nBinder is an awesome project that launches an instance of your notebook given the correct Dockerfile and nuget.config, which will be added automatically by the fsdocs tool when you build the docs.\nyou can include a binder link like this (supposed you use gh-pages to host your docs):\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/\u0026lt;YOUR-ORG\u0026gt;/\u0026lt;YOUR-PROJECT\u0026gt;/gh-pages?filepath=\u0026lt;YOUR-DOCS-FILENAME\u0026gt;.ipynb)\n\nIn fact, you can use this link here to check the conditionals of this very page in a notebook:\n\n","headings":["Including notebooks","Conditional package references","Conditional value inclusion","Including binder links"],"type":"content"}]